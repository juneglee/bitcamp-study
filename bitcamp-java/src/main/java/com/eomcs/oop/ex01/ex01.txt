클래스의 사용

## Class Score { 
-      클래스명 = 역할 = 책임 = 데이터 타입 
- Public (default) O , protected X, private X
ex) class Score {
      String name;
      int kor;
      int eng;
      int math;
      int sum;
      float aver;
    }
  다양한 타입의 메모리를 묶어서 Score라는 새로운 형태의 메모리를 만들 수 있는 설계도.
     => 개발자가 새롭게 정의한 데이터 타입이다.
     => "사용자 정의 데이터 타입" 이라 부른다.
     => 다음과 같이 클래스 문법을 사용하여 설계도를 정의한다.
    
## 필드 선언
(public) (Static) String name ;
- Public (default) O , protected O, private O
- Static o : 클래스 소속, 
- Static x (default) : 인스턴스 소속

ex)  String name;

## 생산자 선언 
(public) Score() {
- Public의 사용으로 패키지에 대한 접근자만 제어할 수 있다

ex) Score(){


## 메소드 선언 
(public) (Static) void m {
- Public (default) O , protected O, private O
- Static o : 클래스 소속, 
- Static x (default) : 인스턴스 소속

ex) Static void Score () {


--------------------------------------------------------------------------
# 스태틱 블록 선언  : 클래스 소속 
Static {
}
  //클래스 필드 (= static 필드)
  // => method Area 에 클래스 코드가 로딩될때 자동 생성
  // => 공통으로 사용할 값일 경우 클래스 필드로 선언한다

# 인스턴스 블록 선언 : 인스턴스 소속  
{
}
  // 인스턴스 필드 (= non-static 필드)
  // => new 명령을 실행해야만 생성되는 변수
  // => 개별적으로 관리되어야 하는 값일 경우 인스턴스 필드로 선언한다.
--------------------------------------------------------------------------
class -> package -> module

## 클래스 사용 - 사용 범위

 #패키지 멤버 클래스
 => 패키지에 직접 소속된 클래스이다.
 => 다른 클래스들도 A 클래스를 사용할 수 있다.
    bin/main/com/eomcs/oop/ex01/A.class (bin에는 java 폴더가 없다)
class A {} //A.class

   bin/main/com/eomcs/oop/ex01/Exam0420.class
public class Exam0420 {
   # 중첩 클래스(nested class)
  => 다른 클래스 안에 정의된 클래스
  => 그 클래스 안에서만 사용된다.
     bin/main/com/eomcs/oop/ex01/Exam0420$B.class
  class B {} //Exam0420$B.class

  public static void main(String[] args) {
   # 로컬 클래스(local class)
   => 메서드 블록 안에 정의된 클래스
   => 오직 그 메서드 블록 안에서만 사용된다.
    bin/main/com/eomcs/oop/ex01/Exam0420$1C.class
       메소드 안에서 정의된 클래스는 $1C(첫번쨰 로컬 클래스라는 의미)로 표시
    class C {}
  }

  public void m1() {
    A ref1;
    B ref2;
    //C ref3; // 컴파일 오류!
  }
}
--------------------------------------------------------------------------
## 레퍼런스와 인스턴스 정리
# 클래스(class)
 - 여러 타입을 묶어서 사용자 정의 데이터 타입을 만드는 문법이다.
 - 관련된 기능(메서드, 함수)을 관리하기 편하게 묶는 문법이다.

# 배열(array)
 - 단일한 타입의 메모리를 묶는 문법이다.
 
  class Score {
      String name;
      int kor;
    }
 
##  개발자가 새롭게 정의한 메모리 설계도에 따라 메모리를 준비
 Score s1;
 이 선언은 설계도에 따라 메모리를 준비시키는 명령이 아니다.!!! 
 Score 설계도에 따라 만든 메모리의 주소를 저장할 변수를 만드는 명령이다
 이렇게 메모리의 주소를 저장하는 변수를 "레퍼런스"라 부른다
 ~ Score[] arr = new Score[i]; // 배열로 레퍼런스를 만들어 주소 를 저장할 공간을 만든다 
 
##  class 문법으로 설계한 메모리 준비하기 (new 클래스명 ();)
 s1 = new Score(); 
 Score 설계도에 따라 메모리를 생성(사용할 수 있도록 확보)
 heap 저장 공간에 인스턴스 를 생성하고 s1에 주소를 저장한다
 ~ 반복문을 이용하여 레퍼런스 배열에 인스턴스 주소를 저장한다
  for (int i = 0; i < arr.length; i++) {
      arr[i] = new Score(); 
  }

# 객체 = 인스턴스 = 설게도에 따라 마든 메모리 
--------------------------------------------------------------------------
## import 의 사용
- import 는 package 선언 다음에 두어야 한다
- 다른 패키지의 클래스 사용할때는  다른 패키지 이름을 항상 붙여야 한다. 그래야만 컴파일러가 해당 클래스를 찾을 수 있다.
  (v1 = new com.eomcs.oop.ex01.test.B();)
- 이러한 불편함을 해걸하기 위해서 import를 미리 적어 둔다
  ( import 패키지명.클래스명; )
- 가능한 import 문을 선언할 때 * 대신 구체적인 클래스명을 적어라! 어떤 클래스가 어떤 패키지에 있는지  빠르게 파악할 수 있기 때문이다. 
- java.lang 패키지에 있는 클래스는 패키지를 지정하지 않아도 컴파일 오류가 발생하지 않는다. 
   이유는 java.lang을 가장 많이 사용하는 기본 클래스이기 때문에 컴파일러는 해당 클래스를 자동으로 찾는다 
--------------------------------------------------------------------------
## test 코딩
사용자로부터 입력 받은 성적 데이터(이름, 국어, 영어, 수학)를 클래스 문법을 이용하여 만든 메모리에 저장하라.
 또한 평균, 합계를 구하고 출력하라. 입력과 출력에 반복문을 적용하라!
## 실행 결과
```
> java -classpath bin step03.assignment.Test01
입력: 홍길동 100 100 100
입력: 임꺽정 90 90 90
입력: 유관순 80 80 80
--------------------------
홍길동 100 100 100 300 100.0
임꺽정  90  90  90 270  90.0
유관순  80  80  80 240  80.0

package com.eomcs.oop.ex01.assignment;

import java.util.Scanner;

public class Test01 {
  public static void main(String[] args) {
    Scanner keyscan = new Scanner(System.in);

    class Score {
      String name;
      int kor;
      int eng;
      int math;
    }

    Score[] arr = new Score[3];

    System.out.println("합계를 구하고 출력하라");
    for (int i = 0; i < arr.length; i++) {
      Score s = new Score(); 

      System.out.print("입력: ");
      s.name = keyscan.next();
      s.kor = keyscan.nextInt();
      s.eng = keyscan.nextInt();
      s.math = keyscan.nextInt();

      arr[i] = s; // 입력받은 값을 다시 레퍼런스 값으로 돌려 놓는다
    }

    keyscan.close();
    System.out.println("-----------------------");

    for (int i = 0 ; i < arr.length; i++ ) {
      Score s = arr[i]; //레퍼런스 값을 인스턴스로 돌려 놓는다 
      int sum = s.kor + s.eng + s.math;
      float aver = sum/3f;
      System.out.printf("%s %d %d %d %d %.1f\n",
          s.name, s.kor, s.eng, s.math, sum, aver);
    }
  }
}


--------------------------------------------------------------------------
## 사용자 정의 데이터 타입을 만들 떄 사용 
 ----> 연산자 + 메서드 
 데이터 중심 <---- 메서드 추가
 
Static O ( static : Score.Calculate(s);)
 
static X ( none : S.Calculate(); )
 
 s: 피연산자, Calculate : 연산자
 
##  소스 코드를 관리하기 쉽게 관련된 기능(메서드)을 묶을 때 사용
 ----> 메서드 + 필드 
 method 중심 <---- 필드 추가 

Static O ( 인스턴스 변수  : Score.Calculate(s); )
 
static X ( 인스턴스 메서드 : S.Calculate(); )

--------------------------------------------------------------------------  
 ##  용도 - 사용  클래스자 정의 데이터 타입
   
  # 클래스 문법의 용도?
 1) 사용자 정의 데이터 타입 만들 때
    - 즉 새로운 구조의 메모리를 설계할 때 사용한다.
 2) 메서드를 묶을 때
     - 서로 관련된 기능을 관리하기 쉽게 묶고 싶을 때 사용한다.
   
   사용자 정의 데이터 타입을 사용하는 방법
   => new 명령을 사용하여 설계도에 기술된 대로 메모리를 준비한다.
   => 메모리는 Heap 영역에 생성된다.
   => 메모리 주소를 레퍼런스(주소 변수)에 저장한다.

 ## 클래스 메서드
 => static이 붙는 메서드
 => 특정 인스턴스가 아닌 모든 인스턴스에 대해 작업을 수행할 때 사용하는 메서드이다.
 => 사용법
    클래스명.메서드명();
    레퍼런스.메서드명(); 
    그러나 가능한 레퍼런스를 사용하여 클래스 메서드를 호출하지 말라!
    다른 개발자가 헷갈려 한다.
   
   # 메서드 = 연산자
  public static void calculate(Score2 score) {
    score.sum = score.kor + score.eng + score.math;
    score.average = score.sum / 3f;
  }
    score.name = "홍길동";
    score.kor = 100;
    score.eng = 90;
    score.math = 85;
    
   Score2.calculate(score);

 ## 인스턴스 메서드
 => static이 붙지 않는 메서드
 => 특정 인스턴스에 대해 작업을 수행할 때 사용하는 메서드이다.
 => 사용법
    레퍼런스.메서드명(); 
      
   # 인스턴스 메서드
  public void calculate() {
    this.sum = this.kor + this.eng + this.math;
    this.average = this.sum / 3f;
  }
   score.name = "홍길동";
    score.kor = 100;
    score.eng = 90;
    score.math = 85;
    
    score.calculate(); 
    
     인스턴스 메서드를 사용하여 연산자 정의하기 
   => 인스턴스의 주소를 파라미터로 받는 것이 아니라, 메서드를 호출할 때(연산자를 사용할 때), 
          메서드 앞에 인스턴스의 주소를 적는다.
   => 이 인스턴스의 주소는 내장된 this라는 변수에 자동 복사된다.
           그래서 파라미터 대신 this를 사용하면 된다.
   => 인스턴스 메서드는 static을 붙이지 않는다.
   
   --------------------------------------------------------------------------
  ##  소스 코드를 관리하기 쉽게 관련된 기능(메서드)을 묶을 때 사용
   
  1) public class Calculator {
  public static int plus(int a, int b) {return a + b;}
   
    int result = 0;
    result = Calculator.plus(2, 3);
  
  2) public class Calculator2 {
  static int result = 0;
  public static void plus(int value) {
   result += value; 
   
   Calculator2.plus(2); //Calculator2의 내부에서 관리하기 때문에 int result=0;값이 따로 필요 없다
  
  #  인스턴스 변수 사용
  3) public class Calculator3 {
  int result = 0; // => 변수 선언 앞에 static이 붙지 않는다.
  public static void plus(Calculator3 calc, int value) {
    calc.result += value;
    // 인스턴스 변수를 다루는 메서드는 작업을 수행할 때 그 인스턴스 주소를 받아야 한다.
    
    Calculator3 c1 = new Calculator3(); // 식1의 계산 결과를 보관할 메모리 준비
    Calculator3 c2 = new Calculator3(); // 식2의 계산 결과를 보관할 메모리 준비

    // 계산을 수행할 때 계산 결과를 보관할 메모리를 전달하라!
    Calculator3.plus(c1, 2);        // + 2
    Calculator3.plus(c2, 3);        // + 3 
   
  # 인스턴스 메서드 사용 
  4) public class Calculator4 {
  int result = 0;

  public void plus(int value) {
    this.result += value;   
    
    Calculator4 c1 = new Calculator4(); // 식1의 계산 결과를 보관할 메모리 준비
    Calculator4 c2 = new Calculator4(); // 식2의 계산 결과를 보관할 메모리 준비

    // 계산을 수행할 때 계산 결과를 보관할 메모리를 전달하라!
    // => 인스턴스 메서드를 사용하면 파라미터로 메모리 주소를 전달할 필요가 없다.
    c1.plus(2);        // + 2
    c2.plus(3);        // + 3
    
    