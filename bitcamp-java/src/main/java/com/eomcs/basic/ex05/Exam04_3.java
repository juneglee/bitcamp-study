// 비트 이동 연산자 : >>, >>>, << 
package com.eomcs.basic.ex05;

public class Exam04_3 {
    public static void main(String[] args) {
      
      // >>> 비트 이동 연산자 사용법
      // 오른쪽으로 이동 
      // - 왼쪽 쪽 빈자리 : 원래 숫자와 같은 부로 값으로 채운다.
      // - 양수면 0, 음수면 1을 채운다.
      // - 오른쪽 경계를 넘어간 비트 : 자른다.
     
      int i = 0b01101001; // 105
      System.out.println(i); 
      // 00000000 00000000 00000000 01101001
      System.out.println(i >>> 1); // 00110100|1 => 52
      // 00000000 00000000 00000000 01101001
      // x00000000 00000000 00000000 0110100|1
      // 밀반자리는 부호와 같은 것으로 채워진다. 0일때는 0, 1일때는 1
      // 00000000 00000000 00000000 00100100 = 52
      
      System.out.println(i >>> 2); // 00011010|0 => 26
      // xx00000000 00000000 00000000 011010|01
      // 00000000 00000000 00000000 00011010 = 26
      
      System.out.println(i >>> 3); // 00001101|0 => 13
      // xxx00000000 00000000 00000000 01101|001
      // 00000000 00000000 00000000 00001101 = 13
      
      System.out.println(i >>> 4); // 00000110|1 => 6

      
      i = 0b11111111_11111111_11111111_10101001; // -87
      System.out.println(i); 
      System.out.println(i >>> 1); 
      
      // 1_11111111_11111111_11111111_1010100|1  
      // 0_11111111_11111111_11111111_1010100    => 2147483604   
      
      System.out.println(i >>> 2); 
      // 11_11111111_11111111_11111111_101010|01 
      // 00_11111111_11111111_11111111_101010    => 1073741802
      
      System.out.println(i >>> 3); 
      // 111_11111111_11111111_11111111_10101|001 
      // 000_11111111_11111111_11111111_10101    => 536870901
      
      System.out.println(i >>> 4);
      // 1111_11111111_11111111_11111111_1010|1001 
      // 0000_11111111_11111111_11111111_1010    => 268435450
    }
}
// 음수를 이동
// => 왼쪽 빈자리는 숫자의 부호비트로 채운다.
//    음수니까 1로 채운다.
// => 2로 나눈 후에 소수점이 있으면 
//    그 수보다 더 작은 정수값이 되는 결과가 나온다.
