package com.eomcs.util;

public class LinkedList {

  // 검색, 삭제, 삽입, 추가를 하기 위해서는 처음과 마지막의 주소를 알아야 한다
  Node first;
  Node last;
  //최소한으로 처음, 마지막, 크기를 알아야 한다
  int size;

  public void add (Object value) {
    Node newNode = new Node();
    newNode.value = value;
    // 파라미터 벨류를 새로만든벨류에 집어 넣는다 

    if(first == null) {
      last = first = newNode; 
      // 값이 null이라면 first ,last 노드를 newValue에 넣는다
    } else {
      last.next = newNode;
      // last 노드의 next 값이 newValue를 넣으므로, next node와 연결된 것이다.
      last = newNode;
      // 결국 옮겨진 newValue이 last값이 되는 것이다
    }
    this.size++; // 노드가 만들어졌기 때문에 size는 증가 시켜야 한다 
  }

  public Object get (int index) { 
    // 3번째 인덱스를 찾는 것은 3번을 움직인 이동경로의  값을 인덱스로 한다
    // 즉 0 ~ 3의 인덱스는 인덱스 번호는 4개이지만 값을 연결된 것이 3개로 연결되어 있기 때문에 
    // 3개의 움직인 값을 인덱스로 한다

    // LinkedList 삽입 하는 과정
    // 노드는 값과 주소로 되어 있기 때문에 연결된 노드끼리 주소를 통해  삽입, 삭제 등이 가능 하다
    // 1. first의 주소의 값을 삭제 하고
    // 2. 삽입할 노드이 주소를 last 값으로 설정하고
    // 3. last 주소를 변경 한다 
    
    if(index < 0 ||  index >= this.size) 
      return null;

    Node cursor = first;
    for (int i = 0 ; i < index ; i++) {
      // 1. first의 주소를 cursor에 담는다 
      // 2. list.next를 cursor에 담는다 
      // 3. 1번에 담긴 cursor가 2번에 담긴 cursor로 옮겨지면서 값이 변경되고, 1번에 담긴 cursor는 삭제 된다
      // 이때 찾고자 하는 index까지, size가 아니다.
      // 값을 인덱스의 갯수로 넣는 것이 아니라, 인덱스까지 가는 경로의 수로 인덱스를 설정한다
      // 즉 인덱스의 값이 3이라고 하면 0부터 3까지 총 4개의 인덱스의 갯수가 존재하는 것이고
      // 경로에 따라 값이 설정된 3번을 반복하게 되는  것이다.
      cursor = cursor.next;
    }
    return cursor.value;
  }
  // System.out.println(list.get(7)); //7개 이지만 값이 벗어나게 된다
  
  // 중첩 클랩스 (nested)
  static class Node {
    Object value;
    Node next; //다음 주소를 저장
  }
}
