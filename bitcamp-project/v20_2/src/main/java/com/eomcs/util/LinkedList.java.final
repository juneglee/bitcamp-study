// final
package com.eomcs.util;

import java.lang.reflect.Array;

public class LinkedList<E> {
  //검색, 삭제, 삽입, 추가를 하기 위해서는 처음과 마지막의 주소를 알아야 한다
  Node<E> first;
  Node<E> last;
  //최소한으로 처음, 마지막, 크기를 알아야 한다
  int size;

  public void add (E value) {
    Node<E> newNode = new Node<>();
    newNode.value = value;
    // 새로만든 벨류에 파라미터 벨류를 집어 넣는다 

    if (first == null ) {
      last = first = newNode;
      // 값이 null이라면 첫번째 ,마지막 노드를 새로 만든 벨류에 넣는다
    } else {
      last.next = newNode;
      // 마지막 노드의 다음 값이 새로 만든 벨류를 넣으므로, 다음 node와 연결된 것이다.
      last = newNode;
      // 결국 옮겨진 새로 만든 값이 last값이 되는 것이다
    }
    this.size++;
    // 노드가 만들어졌기 때문에 size는 증가 시켜야 한다 
  }

  public E get (int index) {
  // 
  
    // 3번째 인덱스를 찾는 것은 3번을 움지면 값의 인덱스로 갈 수 있다
    // 즉 0 ~ 3의 인덱스는 인덱스 번호는 4개이지만 값을 연결된 것이 3개로 연결되어 있기 때문에 
    // 3개의 움직인 값을 인덱스로 한다
    
    // LinkedList 삽입 하는 과정
    // 노드는 값과 주소로 되어 있기 때문에 연결된 노드끼리 주소를 통해  삽입, 삭제 등이 가능 하다
    // 1. first의 주소의 값을 삭제 하고
    // 2. 삽입할 노드이 주소를 last 값으로 설정하고
    // 3. last 주소를 변경 한다 
    if (index < 0 || index >= this.size) {
      return null;
    }

    Node<E> cursor = first; 
    for (int i = 0; i < index ; i++) {
      // 1. first의 주소를 cursor에 담는다 
      // 2. cursor.next를 cursor에 담는다 
      // 3. 1번에 담긴 cursor가 2번에 담긴 cursor로 옮겨지면서 값이 변경되고, 1번에 담긴 cursor는 삭제 된다
      // 이때 반복문의 범위는 i < index는 0부터 시작해서 인덱스 값 전까지 반되기 때문에 결국에는 인덱스의 번호와 동일하게 된다
      // 
      // 값을 인덱스의 갯수로 넣는 것이 아니라, 인덱스까지 가는 경로의 수로 인덱스를 설정한다 
      // 그렇기 때문에 다음 값으로 넘기는 LinkedList에서는 인덱스의 다음 값으로 넘어가기 때문에 0에 대한 add가 힘들다
      // 잘못했던점 : 경로로 생각하기 때문에 0은 출력이 안된다고 생각했다. 하지만 get은 인덱스에 따라 값을 출력 할 수 있다
      //           하지만 위에서 설명했던 겇럼 다음 인덱스로 넘어가는 cursor에 따라서 0의 add가 힘들어지기 때문에 
      //           if문을 사용해서 0에 대한 설정을 해줘야 한다
      cursor = cursor.next;
      // 커서의 다음 주소값을. 커서에 저장해라.
      // 만일 인덱스가 3이라면 0 ~ 2까지 과정을 수행 할 것이다
      // 이때 0은 first으로 지정했기 때문에 first부터 수행 할 것이다.
      // 그리고 값+주소를 가지고 있는 노드에서 주소의 값을 cursor의 다음값을 지정하여 다음 주소로 반복할 수 있도록 도와준다
      // 여기서 인데스는 3이지만 경로에 따라서 게시판을 정해주기 때문에 완벽히 주소가 있는 것은 2까지가 될 것이다.
      
    }
    return cursor.value;
  }
  // System.out.println(list.get(7)); 
  //7개 이지만 값이 벗어나게 된다
  
  public void add (int index, E value) {
    //(위치,값 )
    // 위치를 지정하기 때문에 유효한범위가 있어야 한다
    if (index < 0 || index >= this.size) {
      return; //void이기 때문에 null을 사용하지 않느다 
    }
    Node<E> newNode = new Node<>();
    newNode.value = value;


    Node<E> cursor = first; 
    for (int i = 0; i < index- 1 ; i++) {
   // 추가할 값의 인덱스 전에서 찾아야 한다
      cursor = cursor.next;
    }

    if (index == 0) { // 인덱스가 0일때 즉 범위내의 값중에서 가장 작을 때 
      newNode.next = first; //첫번째 노드는 두번째가 된다
      first = newNode; //새로 추가된 노드를 첫번쨰가 된다
    } else {
      newNode.next = cursor.next; // 삽입할려는 곳에 커스를 위치 시키는 것이 새로 추가된 노드의 다음이 같은 곳에 위치된다
      cursor.next = newNode; //기존 노드의 다음은 새 노드를 가르키게 한다
    }
    this.size++;
  }

  public E remove (int index) {
  //기존의 값을 리턴하기 때문에 object를 사용하였다.    
    if (index < 0 || index >= this.size) {
      return null;
    }

    Node<E> cursor = first; 
    for (int i = 0; i < index- 1 ; i++) {
      cursor = cursor.next;
    }
 // 삭제할 것 전것을 찾아서 커서로 위치 시킨다
    Node<E> deleteNode = null;
    if (index == 0) {
      deleteNode = first;
      first = deleteNode.next;
    } else {
      deleteNode = cursor.next;  // 현재 커서의 다음이 삭제할 노드라고 알려줌
      cursor.next = deleteNode.next; // 삭제할 노드의 다음값의 주소를 현재 커스 주소에 넣음으로써 삭제할 다음 노드와 연결
    }
    deleteNode.next = null; //쓰레기가 다른 가비를 가르쳐 유효한 값이 되지 않도록 한다
    this.size--;
    return deleteNode.value; //삭제할 노드의 값을 찾고 싶은 사람이 있기 때문에 값으로 리턴한다
  }

  public E set (int index, E value) {
    if (index < 0 || index >= this.size) {
      return null;
    }

    Node<E> cursor = first; 
    for (int i = 0; i < index ; i++) {
      cursor = cursor.next;
    }

    E oldValue = cursor.value;
    cursor.value = value;

    return oldValue;
  }

  public Object[] toArray() {
    Object[] arr = new Object[size];

    Node<E> cursor = first;
    for (int i = 0 ; i < size ; i++) {
      arr[i] = cursor.value; // 현재 커스를 배열에 담는다
      cursor = cursor.next;  //커서를 다음방으로 이동한다
    }
    return arr;
  }

  @SuppressWarnings("unchecked")
  public E[] toArray(E[] arr) {
    if (arr.length < size) {
      arr = (E[]) Array.newInstance(arr.getClass().getComponentType(), size);
    //(배열의 자체타입, 각 항목의 타입, 길이)
    }
    Node<E> cursor = first;
    for (int i = 0 ; i < size ; i++) {
      arr[i] = cursor.value; // 현재 커스를 배열에 담는다
      cursor = cursor.next; //커서를 다음방으로 이동한다
    }
    return arr;
  }

  public int size() {
    return this.size;  //.next라고 지정하여 주소의 값을 나타낸다
  }




  static class Node<T> {
    T value;
    Node<T> next;

  }
}
