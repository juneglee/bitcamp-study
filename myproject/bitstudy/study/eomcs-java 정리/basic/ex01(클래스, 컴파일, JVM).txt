1. 클래스 블록과 컴파일 I
- 자바 컴파일러는 클래스 블록 단위로 컴파일을 수행한다.
- 클래스 블록 단위로 클래스 파일(.class 파일)을 생성한다.
  (- 한 소스 파일에 여러 개의 클래스 블록이 있을 경우 각 블록 당 한 개의 클래스 파일(.class)이 생성된다.)
- 클래스 파일의 이름은 클래스 블록의 이름과 같다.

ex) package com.eomcs.basic.ex01;

class A {}
class B {}
class C {}
- 클래스 블록 단위로 컴파일을 수행하고 클래스 파일(.class 파일)을 생성하기 때문에 A, B, C의 클래스 파일이 생성


2. # 클래스 이름과 소스 파일 이름 I
- 문법
  - 공개: public class 클래스명 {...}
    - 공개(public) 클래스의 경우 소스 파일명이 클래스 이름과 같아야 한다. 다르면 컴파일 오류가 발생한다.
  - 비공개: class 클래스명 {...}
    - 비공개 클래스의 경우 클래스명과 소스 파일명이 일치하지 않아도 된다

## 클래스 접근 제어
- 클래스를 선언할 때 사용 범위를 조정할 수 있다.
  - public : 다른 패키지의 클래스가 사용할 수 있게 공개한다.
  - protected : 같은 패키지 내에 있거나 상속받은 경우메나 접근 가능
  - default : 같은 패키지에 소속된 클래스만이 사용할 수 있다.
  - private : 해당 클래스 내에서만 접근 가능
.
# 클래스 이름과 소스 파일 이름 
- 클래스(.class)를 공개하는 경우 소스 파일(.java) 이름은 반드시 클래스 이름과 같아야 한다.
  (클래스명과 소스파일 명이 다르면 컴파일 오류가 발생한다)
- 소스 코드의 관리를 쉽게 하기 위해 보통 한 파일에 한 클래스를 둔다.
- 또한 클래스 이름과 파일명을 같게 하여 찾기 쉽게 한다.

3. 소스 파일의 인코딩 지정하기 
- 컴파일 할 때 소스 파일의 문자집합을 지정하는 방법 (Powershell에서 complie시에)

## 컴파일할 때 소스 파일의 인코딩 문자집합을 지정하기
- Powershell에서 소스 파일을 컴파일할 때 소스 파일의 인코딩 문자집합을 지정하지 않으면, 운영체제의 기본 문자 집합으로 저장되어 있다고 간주하고 컴파일한다.
  만약 소스 파일의 인코딩 문자집합이 운영체제의 기본 문자표(character set)와 다르다면, 컴파일 오류가 발생한다.
 javac -encoding [문자집합] [소스파일명] ex) javac -encoding UTF8 -d bin/main src/main/java/~~~~/XXXX.java

4. ## JVM이 클래스를 실행하는 과정
1) 실행할 클래스 파일을 CLASSPATH(CP)에 등록된 디렉토리 경로에서 찾는다.
2) 클래스 파일이 유효한 바이트코드(bytecode) 인지 검사한다.
3) 메모리에 바이트코드를 적재(load)한다.
4) public static void main(String[] args) {} 블록을 찾는다.
5) main() 블록에 들어 있는 코드를 실행한다.

# main() 메서드
- JVM을 통해 클래스를 실행하면, JVM은 그 클래스에서 main() 메서드를 찾아 실행한다.
  Powershell에서 자바 실행의 예) $ java -cp bin/main com.eomcs.basic.ex01.Exam4
- main() 메서드가 없으면 실행 오류가 발생한다.
