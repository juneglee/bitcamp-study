제어문
- 기본적인 문법을 설명
- 반복문을 통한 별모양 만들기 
- 응용 : # 을 이용하여 자릿수에 따른 다른 모양으로 만들기 
- 다른 응용 예제를 활용하여 코딩하기

1. 조건문 if, if ~ else 문
- if (age >= 19) System.out.println("성인이다.");
- if 문의 조건은 반드시 boolean 데이터여야 한다. ( == 연산자 대신 =을 사용한 경우,(오타))
- 

 # 흐름 제어문 - else 문의 소속
- if 문은 else 문 없이 단독으로 사용할 수 있다.
- => else 문만 단독으로 사용할 수 없다.  항상 if 문과 짝을 이뤄 사용한다.
-  조건이 거짓이면 다음 else 문을 실행한다.

 # 흐름 제어문 - if ~ else if ~ else if ~ else
- // else는 가장 가까운 if에 소속된다.  // 들여쓰기에 속지 말라!
if (age >= 19)
      if (age >= 70) 
        System.out.println("지하철 무임승차 가능합니다.");
    else 
      System.out.println("미성년입니다.");

만약 else 문을 첫 번째 if 문에 소속되게 하고 싶다면
    // 다음과 같이 두 번재 if 문을 블록으로 묶어라!
if (age >= 19) {
      if (age >= 70) 
        System.out.println("지하철 무임승차 가능합니다.");
    }
    else // 두 번째 if는 첫 번째 if 블록에 묶여있기 때문에 이 else와 상관없다. 
      System.out.println("미성년입니다.");

// if ~ else ~ 만 있다면 블록으로 묶지 않아도 된다.
    if (age < 8) 
      System.out.println("아동입니다.");
    else if (age < 14) 
      System.out.println("어린이입니다.");
    else if (age < 19) 
      System.out.println("청소년입니다.");
    else if (age < 65)
      System.out.println("성인입니다.");
    else
      System.out.println("노인입니다.");   
    
2.  switch 문법
 switch (조건) {
   case 1:
     System.out.println(""); 	
   case 2:
     System.out.println("");
   case 3:
     System.out.println("");
     break;
   default:
     System.out.println("");

 if vs switch
 => 복잡한 조건으로 프로그램 흐름을 제어해야 하는 상황이라면
    if 문을 사용하라!
 => int나 문자열처럼 단순한 값으로 프로그램을 제어할 수 있다면,
    switch문을 사용하는 게 낫다.

3. 반복문 while
// while (조건) 문장;
    // => 조건이 참인 동안 문장을 계속 실행한다.
// while (조건) {}
    // => 여러 개의 문장을 반복 실행하려면 블록으로 묶어라!

    int count = 0;
    int sum = 0;

    // 1부터 100까지의 합은?
    while (count < 100) {
      //count++;
      //sum += count;
      sum += ++count;
    }
    System.out.printf("count=%d, sum=%d\n", count, sum);

구구단에서 5*5에서 멈추는 예제  -- 코딩을 통해서 활용 
    // 5 * 5 까지만 출력하라!
    // 라벨명: 반복문1 { 반복문2 {break 라벨명;}}
    // 라벨 문법:
    //      라벨: 문장;
    //      라벨: {문장1, 문장2, ...}
    
    myloop: 
      while (x <= 9) {
        while (y <= 9) {
          System.out.printf("%d * %d = %d\n", x, y, x * y);

          if (x == 5 && y == 5)
            //break; // 이 break는 자신이 소속된 가장 가까운 반복문을 나간다.
            break myloop; // myloop 라벨에 소속된 문장을 나간다.
          y++;
        }
        System.out.println();
        x++;
        y = 1;
      }
    System.out.println("종료!!");

   break와 continue
   do ~ while 반복문

    int i = 0;

    // 1부터 10까지 출력하기
    do 
      System.out.println(++i);
    while (i < 10);

   // 여러 개의 문장을 반복할 때는 블록으로 묶어라!
    i = 0;
    do {
      i += 1;
      System.out.println(i);
    } while (i < 10);


4. for 반복문
    // for (변수선언 및 초기화; 조건; 증감문) 문장;
    // for (변수선언 및 초기화; 조건; 증감문) {문장1; 문장2; ...}

   for 반복문의 초기화 변수
   // for 문 안에 선언된 변수는 for 문을 나가는 순간 제거된다.
   // 반복문을 종료한 뒤라도 해당 변수의 값을 사용하고 싶으면,
   // 다음과 같이 반복문 밖에 변수를 선언하라!
   for 반복문과 배열
    // 배열의 처음부터 끝까지 값을 꺼내는 것이라면 
    // 다음의 for 문법을 사용하라! 아주 편하다!
    // for (배열에서 꺼낸 값을 저장할 변수 선언 : 배열주소) 문장;
    for (String name : names) 
      System.out.println(name);

    // 위의 방식으로 for 문을 사용할 경우
    // 변수 선언을 바깥에 둘 수 없다.
    /*
        String name2;
        for (name2 : names) // 컴파일 오류!
            System.out.println(name2);
     */

   for 반복문과 컬렉션

    // 배열은 같은 타입의 값만 보관할 수 있지만
    // 컬렉션은 다른 타입의 값도 보관할 수 있다.
    // 
    // 배열은 크기가 고정되지만,
    // 컬렉션은 크기가 가변적이다.
    ArrayList list = new ArrayList();
    list.add("홍길동");
    list.add(3.14f);
    list.add(true);
    list.add(365);

    // for 문에 컬렉션도 적용할 수 있다.
    // for (변수 선언 : 컬렉션객체) 문장;
    for (Object value : list) 
      System.out.println(value);