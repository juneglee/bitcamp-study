12.12 (목) 학습일지 
- 데이터 타입
- reference (다른 메모리의 주소를 저장)
- 변수 선언
- 할당 연산자 정리 
- 용어 정리
- 문장 (statement, expression)
- sandbox 

1. sandbox 
- 운영체제가 프로그램을 제어하여 하드웨어에 넘어오지 못하도록 한다.
- 사용자가 개입을 해야지만 제어를 가능하도록 맏들어졌다 (window 95 이상)

ex04
1. 변수 선언, 여러 개의 변수를 선언, 변수 선언의 오류 (1,2, 1,2)
변수(메모리)에 값 넣기, 변수 초기화 문장(다중 변수), 다중변수 초기화
변수를 새값으로 변경, 
변수의 종류 (원시 데이터 타입 변수), reference

2. 정수 변수
변수의 메모리크기
변수와 리터럴의 크기
크기가 다른 변수끼리 값 할당

3. 부동소수점

4. 문자변수

5. 논리값 변수

ex 99

1. 스캐너
2. 키보드
3. nextLine(String,L 대문자, 문자의 값을 리턴)
4. nextInt (Int, 정수의 값을 리턴)

날짜 확인

Date today = new Date(System.currentTimeMillis());
System.out.printf("날짜: %s\n", today);

Date객체를 활용하는 방법 

SimpleDateFormat format1 = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss");
SimpleDateFormat format2 = new SimpleDateFormat ( "yyyy년 MM월dd일 HH시mm분ss초");
		
Date time = new Date();
		
String time1 = format1.format(time);
String time2 = format2.format(time);
		
System.out.println(time1);
System.out.println(time2);

Calendar클래스의 getInstance()메서드를 활용하는 방법 

SimpleDateFormat format1 = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss");
SimpleDateFormat format2 = new SimpleDateFormat ( "yyyy년 MM월dd일 HH시mm분ss초");
		
Calendar time = Calendar.getInstance();
       
String format_time1 = format1.format(time.getTime());
String format_time2 = format2.format(time.getTime());
        
System.out.println(format_time1);
System.out.println(format_time2);

System클래스의 currentTimeMillis()메서드를 활용하는 방법 

SimpleDateFormat format1 = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss");
SimpleDateFormat format2 = new SimpleDateFormat ( "yyyy년 MM월dd일 HH시mm분ss초");
		
String format_time1 = format1.format (System.currentTimeMillis());
String format_time2 = format2.format (System.currentTimeMillis());
        				 		
 System.out.println(format_time1);
 System.out.println(format_time2);


