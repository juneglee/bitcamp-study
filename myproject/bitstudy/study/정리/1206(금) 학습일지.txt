리터럴 : Data를 표현 (문자, 숫자, 부동소수점 등...)
변수 : Data를 저장할 메모리를 준비하는 방법
배열 : 같은 유형의 메모리를 여러개 준비시키는 문법
연산자 : Data를 가공 도구
제어문 : 명령문의 실행 흐름을 제어 (if , else, while, for 등)
메서드(=function) : 여러개 문장을 기능단위로 묶음 - 명령어를 관리하기 편하게 기능 단위로 묶는 단계
클래스 : 메스드 관리하귀 편하게 역할(role), 책임( responsibility) 단위로 분류
디자인 패턴 : 효율적인 클래스 구조 관리 
사용자 정의 데이터 타입 : 메모리 구조를 Data에 맞게 커스터마이징 하는 타입
생성자 : 인스턴스를 초기화 시키는 기능을 수행
인스턴스 : 클래스 설계도에 따라 준비한 메모리 
인스턴스 method : 인스턴스 메모리를 다루는 기능을 수행
접근제어 (캡슐화) : 메소드나 메모리에 사용을 제어 
상속 : 기존 기능을 확장하는 문법
오버라이딩 : 기존 기능의 재 정의
오버로딩 : 같은 이름의 유사기능 추가 문법
다형적 변수 : 같은 유형의 메모리를 가르키는 방법 

file I/O : 개발자가 직법 Data를 재정하는 도구 사용법
JDBC : DBMS 를 사용하여 Data를 저장하는 도구 사용법

My : JDBC 도구를 좀 더 쉽게 사용하게 해주는 도구 사용법


1. function> class > package

2. data 프로그래밍 순서

3. 정수, 숫자, 논리, 부동 소수점, 그림, 소리(전기적 신호)

4. 그림 파일 (RGB)

5. encoding, decoding
