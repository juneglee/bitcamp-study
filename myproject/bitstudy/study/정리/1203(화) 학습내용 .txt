# 컴퓨터와 소프트웨어		
[ ]컴퓨터와 소프트웨어의 관계를 이해한다.	
- 컴퓨터는 포괄적, 소프트웨어는 컴퓨터의 일부분이다
- 컴퓨터에는 중앙처리,하드웨어,입출력,운영체제 등을 종합적으로 만들어진 하나의 제품이다
- 컴퓨터 안에서 소프트웨어의 담당은 중앙처리 등의 하드웨어를 운영할 수 있는 Operating System 인 (윈도우, 리눅스, macOs)등에서 하나의 프로그램을 실행하기 위해서 만들어진 코드의 집합이다
- 소프트웨어는 하드웨어를 효율적으로 사용하기 위하여 하드웨어가 컴퓨터의 언어로 알 수 있도록 제어하는 형태이다

[ ]시스템 소프트웨어와 응용 소프트웨어를 구분할 수 있다.

		
- 시스템 소프트웨어 : 시스템 소프트웨어는 컴퓨터 안의 하드웨어(즉, 중앙처리(CPU), RAM, Cashe, HDD 등에서 효율적으로 작동할 수 있는 하나의 프로그램)  
- 응용 소프트웨어 : 만들어진 하나의 하드웨어에서 그의 일부분을 사용하여 프린터, 키보드, 마우스 등을 작동할 수 있도록 만들어진 드라이버 등의 형식으로 만들어진 프로그램

# 프로그램의 구동 원리		
[ ]컴퓨터에서 프로그램이 실행되는 원리를 이해한다.
xxxx.exe :  cpu에게 명령을 내리는 프로그램 
- 프로그램은 CPU(중앙처리)에서 Hz의 속도로 중앙처리를 담당하며, 이때 저장장소(HDD,SSD)에 저장된 프로그램을 실행하고, 여기서 임시저장장치인 캐쉬메모리, RAM을 이용하여 프로그램을 실행한다 
- 캐쉬메모리는 임시 저장 장치이며, 중앙처리보다 느리고 저장장치보다 빠르다.
- 중앙처리(CPU)는 하나의 코어에서 실행가능하며, 듀얼,헥사 등의 여러개의 코어로 실행 가능하지만, 처리 속도는 느리다
-		
[ ]CPU 인스트럭션이 무엇인지 이해한다. (ARM CPU 기준)	검색	http://vision.gel.ulaval.ca/~jflalonde/cours/1001/h17/docs/arm-instructionset.pdf
- 2진수로 운영되는 CPU에게 전기적 신호를 보내주기 위해서 만들어진 규칙에 따라 CPU가 실행되게 된다
- 언어의 종류에는 저급, 중간, 고급 언어가 있다
- CPU는 0V,1.5V의 형식처럼 0과 1의 구분만을 할 수 있으며, 초기의 컴퓨터는 2진수(0,1)의 사용으로 저급 언어의 형태인 기계어 및 어셈블리를 사용하여 CPU의 명령을 담당하였다
- 그러면서 고급 언어의 형태로 발전하면서 C/C++ 등의 사람 지향적이 고급 언어를 사용할 수 있게 되었고, JAVA처럼 객체 지향적인 언어로 발전하게 되었다 

[ ]CPU 인스트럭션과 실행 파일, OS의 관계를 이해한다.		
-CPU에서는 기계어 처럼 직접적으로 CPU의 명령을 실행할 수 있지만, 잘 사용하지 않는다 
- 기계어의 발전으로 0,1의 형태에서 조금 발전한 인스트럭션 어셈블리를 사용하였지만 어셈블러를 이용하여 컴파일 해야 한다 
- 또한 사람 중심의 고급언어(C,C++)등의 발전으로 좀 더 쉽게 OS를 실행 할 수 있다

[ ]같은 CPU에 맞춰 작성된 실행 파일이더라도 OS가 다르면 실행되지 않는 이유를 설명할 수 있다.	
- 예를 들어, 같은 CPU에서 작성된 실행 파일은 다른 폼(Form)의 형태로 작성된 것이기 때문에 이를 실행할 때는 형식이 다르기 때문에 실행되지 않는다  	

# 중간 언어와 가상 머신		
- Java> Java complier > Java 가상 바이트 코드 > JVM - 운영체제 바이널리 실행 > 프로그램 실행 > javascript > nodejs
[ ]중간 언어와 가상 머신이 등장한 이유와 이점을 설명할 수 있다.
- 중간 언어 : 하나의 code를 작성하여도 각각의 운영체제에서 컴파일해야하는 단점을 극복하기 위해서 중간 언어 (바이트 코드 = P-code =intermediate Repesentation=engine=VM=runtime) 을 만들었다 (기계어 - 중간 언어 - 고급언어)
- 가상 머신 : 중간 언어의 형식으로 만들어진 언어를 각각의 운영체제에서 실행하기 위해서 만들어진 실행파일 

[ ]VM과 인터프리터, 런타임, 플레이어, 엔진의 역할을 이해한다.		
- VM은 가상 머신으로써 위에서 설명한 것처럼 각각의 운영체제에서 실행하기 위해서 만들어진 실행파일 
- 인터프리터 (java의 실행과정을 보면 (Java> Java complier > Java 가상 바이트 코드 = 컴파일링)/( JVM - 운영체제 바이널리 실행 > 프로그램 실행 = 인터프리터(interpert(해석)을 담당한다)

