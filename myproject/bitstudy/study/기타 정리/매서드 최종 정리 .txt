 메서드(method) = 함수(function)?
 - 명령어를 기능 단위로 관리하기 쉽게 별도로 분리하여 묶어 놓은 것.
 - 반복적으로 자주 사용하는 명령어를 재사용하기 쉽도록 별도로 분리하여 묶어 놓은 것.
 - "코드를 관리하기 쉽고 재사용하기 쉽도록 기능 단위로 묶어 놓는 문법"


 메서드 종류?
 - 클래스 메서드    
  => 클래스에 소속되어 있다.
  => 모든 인스턴스에 대해 사용할 수 있다.
  => static이 붙는다.
 - 인스턴스 메서드
   => 인스턴스에 대해 사용할 수 있다.
   => static이 붙지 않는다.
 


메서도 형식 (4가지 종류) OverView

public class test01 {
  public static void main(String[] args) {

    
    m1();                           //입력 값 : x , 리턴 값 : x


    m2("홍길동");                 //입력 값 : ㅇ , 리턴 값 : x

    
    String s;                       //입력 값 : x , 리턴 값 : o
    s = m3();
    System.out.println(s);

    String s2 = m4("홍길동");    //입력 값 : o , 리턴 값 : o
    System.out.println(s2);

  }
  static void m1() {
    System.out.println("Hello!");

  }

  static void m2(String name) {              
     System.out.println("Hello," + name);
  }
  
  static String m3() {
    String message = "hello!";
    return message; //return 값을 구분해야 한다
    // 값은 only 하나만 리턴하며, 여러개를 리턴받고 싶으면 클래스로 지정해야 한다
  }
  static String m4(String name) {
    String message = name + " 님 안녕하세요"; 
    return message; 
  }

    // 함수 안에 선언된 변수를 "로컬 (local)변수"라 부른다
    // 로컬 변수 중에서 함수(메서드)가 호출될 때 넘어 온 값을 받는 변수를 파라미터라 부른다.
     // 함수를 호출 할 때 넘겨주는 값을 아규먼트(argument)라 부른다
﻿
메서드 (call by value, call by reference)
- "call by value" : 메서드를 호출할 때 a 변수의 값과 b 변수의 값을 넘긴다.

static void swap(int a, int b) {
    System.out.printf("swap(): a=%d, b=%d\n", a, b);
    int temp = a;
    a = b;
    b = temp;
    System.out.printf("swap(): a=%d, b=%d\n", a, b);
  }

  public static void main(String[] args) {
    int a = 100;
    int b = 200;
    swap(a, b);
    System.out.printf("main(): a=%d, b=%d\n", a, b);
  }
}

=> 자바에서는 primitive data type인 경우 메서드를 호출할 때  값을 넘긴다. (primitive data type에 대해서 메모리 주소를 넘기는 방법이 없다.)


- "call by reference" : 메서드를 호출할 때 배열 주소를 넘긴다. (인스턴스(메모리)를 넘기는 것이 아니다)  


static void swap(int[] arr) {
    System.out.printf("swap(): arr[0]=%d, arr[1]=%d\n", arr[0], arr[1]);
    int temp = arr[0];
    arr[0] = arr[1];
    arr[1] = temp;
    System.out.printf("swap(): arr[0]=%d, arr[1]=%d\n", arr[0], arr[1]);
  }

  public static void main(String[] args) {
    int[] arr = new int[] {100, 200};
    swap(arr); 
    System.out.printf("main(): arr[0]=%d, arr[1]=%d\n", arr[0], arr[1]);
  }
}

   
